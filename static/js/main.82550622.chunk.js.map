{"version":3,"sources":["features/appSlice.js","SidebarChannel.js","features/userSlice.js","firebase.js","Sidebar.js","ChatHeader.js","Message.js","Chat.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","channelId","channelName","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","SidebarChannel","_ref","id","dispatch","useDispatch","_jsx","className","onClick","children","_jsxs","userSlice","user","login","logout","selectUser","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Sidebar","useSelector","channels","setChannels","useState","useEffect","collection","onSnapshot","snapshot","docs","map","doc","channel","data","ExpandMoreIcon","AddIcon","handleAddChannel","prompt","add","SignalCellularAltIcon","fontsize","InfoOutlinedIcon","CallIcon","Avatar","signOut","alt","src","photo","displayName","uid","substring","MicIcon","HeadsetIcon","SettingsIcon","ChatHeader","NotificationsIcon","EditLocationRoundedIcon","PeopleAltRoundedIcon","placeholder","SearchRoundedIcon","SendRoundedIcon","HelpRoundedIcon","Message","timestamp","message","Date","toDate","toUTCString","Chat","input","setInput","messages","setMessages","orderBy","AddCircleIcon","fontSize","value","disabled","onChange","e","target","concat","type","preventDefault","FieldValue","serverTimestamp","CardGiftcardIcon","GifIcon","EmojiEmotionsIcon","Login","Button","signIn","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","console","log","photoURL","email","_Fragment","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","React","StrictMode","Provider","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82550622.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const appSlice = createSlice({\r\n  name: \"app\",\r\n  initialState: {\r\n    channelId: null,\r\n    channelName: null,\r\n  },\r\n  reducers: {\r\n    setChannelInfo: (state, action) => {\r\n      state.channelId = action.payload.channelId;\r\n      state.channelName = action.payload.channelName;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectChannelId = (state) => state.app.channelId; //so from state(onion) to the appslice to channelID\r\nexport const selectChannelName = (state) => state.app.channelName;\r\n\r\nexport default appSlice.reducer;\r\n","import React from \"react\";\r\nimport \"./SidebarChannel.css\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setChannelInfo } from \"./features/appSlice\";\r\n\r\nfunction SidebarChannel({ id, channelName }) {\r\n  const dispatch = useDispatch();\r\n\r\n  //the key{id} is for rendering performance\r\n  return (\r\n    <div\r\n      className=\"sidebarChannel\"\r\n      onClick={() =>\r\n        dispatch(\r\n          setChannelInfo({\r\n            channelId: id,\r\n            channelName: channelName,\r\n          })\r\n        )\r\n      }\r\n    >\r\n      <h4>\r\n        <span className=\"sidebarChannel__hash\">#</span>\r\n        {channelName}\r\n      </h4>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidebarChannel;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyA70yGhEkfuxB-tw6DxrmOhx1lqMGEUyaE\",\r\n  authDomain: \"discord-clone-f87c9.firebaseapp.com\",\r\n  projectId: \"discord-clone-f87c9\",\r\n  storageBucket: \"discord-clone-f87c9.appspot.com\",\r\n  messagingSenderId: \"613193012662\",\r\n  appId: \"1:613193012662:web:f6f8f76dc3449b9f8d9d17\",\r\n  measurementId: \"G-RGQSYL3Y51\",\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\n// grab the database\r\nconst db = firebaseApp.firestore();\r\n\r\n// authentication\r\nconst auth = firebase.auth();\r\n\r\n// provider - authentication by google services\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n// export\r\nexport { auth, provider };\r\nexport default db;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport SidebarChannel from \"./SidebarChannel\";\r\nimport SignalCellularAltIcon from \"@material-ui/icons/SignalCellularAlt\";\r\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\r\nimport CallIcon from \"@material-ui/icons/Call\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport HeadsetIcon from \"@material-ui/icons/Headset\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport db, { auth } from \"./firebase\";\r\n\r\nfunction Sidebar() {\r\n  const user = useSelector(selectUser);\r\n  const [channels, setChannels] = useState([]); //channels is set to an empty array , initial state\r\n\r\n  useEffect(() => {\r\n    //on snapshot means if something occurs in real time,\r\n    //so this is an event listner that ensure that whenever the channels change it fires of a snapshop and then the channels change\r\n    db.collection(\"channels\").onSnapshot((snapshot) =>\r\n      setChannels(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          channel: doc.data(),\r\n        }))\r\n      )\r\n    );\r\n  }, []);\r\n\r\n  const handleAddChannel = () => {\r\n    const channelName = prompt(\"Enter a new channel name\");\r\n\r\n    if (channelName) {\r\n      db.collection(\"channels\").add({\r\n        channelName: channelName,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__top\">\r\n        <h3>Henry's Server</h3>\r\n        <ExpandMoreIcon />\r\n      </div>\r\n\r\n      <div className=\"sidebar__channels\">\r\n        <div className=\"sidebar__channelsHeader\">\r\n          <div className=\"sidebar__header\">\r\n            <ExpandMoreIcon />\r\n            <h4>Text Channels</h4>\r\n\r\n            <AddIcon\r\n              onClick={handleAddChannel}\r\n              className=\"sidebar__addChannel\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"sidebar__channelsList\">\r\n          {channels.map(({ id, channel }) => (\r\n            <SidebarChannel\r\n              key={id}\r\n              id={id}\r\n              channelName={channel.channelName}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sidebar__voice\">\r\n        <SignalCellularAltIcon\r\n          className=\"sidebar__voiceIcon\"\r\n          fontsize=\"large\"\r\n        />\r\n        {/* use flex:1 to makeit float left and take the rest of the space */}\r\n        <div className=\"sidebar__voiceInfo\">\r\n          <h3>Voice Connected</h3>\r\n          <p>Stream</p>\r\n        </div>\r\n        <div className=\"sidebar__voiceIcons\">\r\n          <InfoOutlinedIcon />\r\n          <CallIcon />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sidebar__profile\">\r\n        <Avatar\r\n          onClick={() => auth.signOut()}\r\n          alt=\"profile image\"\r\n          src={user.photo}\r\n        />\r\n        <div className=\"sidebar__profileInfo\">\r\n          <h3>{user.displayName}</h3>\r\n          <p>#{user.uid.substring(0, 5)}</p>\r\n        </div>\r\n        <div className=\"sidebar__profileIcons\">\r\n          <MicIcon />\r\n          <HeadsetIcon />\r\n          <SettingsIcon />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport \"./ChatHeader.css\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport EditLocationRoundedIcon from \"@material-ui/icons/EditLocationRounded\";\r\nimport PeopleAltRoundedIcon from \"@material-ui/icons/PeopleAltRounded\";\r\nimport SearchRoundedIcon from \"@material-ui/icons/SearchRounded\";\r\nimport HelpRoundedIcon from \"@material-ui/icons/HelpRounded\";\r\nimport SendRoundedIcon from \"@material-ui/icons/SendRounded\";\r\n\r\nfunction ChatHeader({ channelName }) {\r\n  return (\r\n    <div className=\"chatHeader\">\r\n      <div className=\"chatHeader__left\">\r\n        <h3>\r\n          <span className=\"chatHeader__hash\">#</span>\r\n          {channelName}\r\n        </h3>\r\n      </div>\r\n      <div className=\"chatHeader__right\">\r\n        <NotificationsIcon />\r\n        <EditLocationRoundedIcon />\r\n        <PeopleAltRoundedIcon />\r\n\r\n        <div className=\"chatHeader__search\">\r\n          <input placeholder=\"Search\" />\r\n          <SearchRoundedIcon />\r\n        </div>\r\n\r\n        <SendRoundedIcon />\r\n        <HelpRoundedIcon />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatHeader;\r\n","import React from \"react\";\r\nimport \"./Message.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\n\r\nfunction Message({ timestamp, user, message }) {\r\n  return (\r\n    <div className=\"message\">\r\n      <Avatar src={user.photo} />\r\n      <div className=\"message__info\">\r\n        <h4>\r\n          {user.displayName}\r\n          <span className=\"message__timestamp\">\r\n            {new Date(timestamp?.toDate()).toUTCString()}\r\n          </span>\r\n        </h4>\r\n\r\n        <p>{message}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Message;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Chat.css\";\r\nimport ChatHeader from \"./ChatHeader\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport CardGiftcardIcon from \"@material-ui/icons/CardGiftcard\";\r\nimport GifIcon from \"@material-ui/icons/Gif\";\r\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\";\r\nimport Message from \"./Message\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectChannelName, selectChannelId } from \"./features/appSlice\";\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport db from \"./firebase\";\r\nimport firebase from \"firebase\";\r\n\r\nfunction Chat() {\r\n  const user = useSelector(selectUser);\r\n  const channelId = useSelector(selectChannelId);\r\n  const channelName = useSelector(selectChannelName);\r\n  const [input, setInput] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (channelId) {\r\n      db.collection(\"channels\")\r\n        .doc(channelId)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"desc\")\r\n        .onSnapshot((snapshot) =>\r\n          setMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n  }, [channelId]);\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault(); // this is to prevent the page from refreshing after hitting send/submit\r\n    db.collection(\"channels\").doc(channelId).collection(\"messages\").add({\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n      message: input,\r\n      user: user,\r\n    });\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <ChatHeader channelName={channelName} />\r\n\r\n      <div className=\"chat__messages\">\r\n        {messages.map((message) => (\r\n          <Message\r\n            timestamp={message.timestamp}\r\n            message={message.message}\r\n            user={message.user}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"chat__input\">\r\n        <AddCircleIcon fontSize=\"large\" />\r\n\r\n        <form>\r\n          <input\r\n            value={input}\r\n            disabled={!channelId}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            placeholder={`Message # ${channelName}`}\r\n          />\r\n          <button\r\n            disabled={!channelId}\r\n            className=\"chat__inputButton\"\r\n            type=\"submit\"\r\n            onClick={sendMessage}\r\n          >\r\n            Send Message\r\n          </button>\r\n        </form>\r\n\r\n        <div className=\"chat__inputIcons\">\r\n          <CardGiftcardIcon fontSize=\"large\" />\r\n          <GifIcon fontSize=\"large\" />\r\n          <EmojiEmotionsIcon fontSize=\"large\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport \"./Login.css\";\r\nimport { auth, provider } from \"./firebase\";\r\n\r\nfunction Login() {\r\n  const signIn = () => {\r\n    auth.signInWithPopup(provider).catch((error) => alert(error.message));\r\n  };\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"logo__logo\">\r\n        <img\r\n          src=\"https://cdn.arstechnica.net/wp-content/uploads/2017/08/Discord-LogoWordmark-Color-800x272.png\"\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n\r\n      <Button onClick={signIn}>Sign in</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"./App.css\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport Chat from \"./Chat\";\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport Login from \"./Login\";\r\nimport { auth } from \"./firebase\";\r\nimport { login, logout } from \"./features/userSlice\";\r\n\r\nfunction App() {\r\n  //the dispatch shoots data into the data layer\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser);\r\n\r\n  // useEffect is a hook that runs once , when the application starts\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      //listener\r\n      console.log(\"user is\", authUser);\r\n      if (authUser) {\r\n        //when user is logged in\r\n        dispatch(\r\n          login({\r\n            uid: authUser.uid,\r\n            photo: authUser.photoURL,\r\n            email: authUser.email,\r\n            displayName: authUser.displayName,\r\n          })\r\n        );\r\n      } else {\r\n        //when user is logged out\r\n        dispatch(logout());\r\n      }\r\n    });\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {/* if there is a user show app, else, take user to login */}\r\n      {user ? (\r\n        <>\r\n          <Sidebar />\r\n          <Chat />\r\n        </>\r\n      ) : (\r\n        <Login />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport userReducer from \"../features/userSlice\";\r\nimport appReducer from \"../features/appSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}